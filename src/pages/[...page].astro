---
import type { GetStaticPaths } from 'astro'
import Layout from '@layouts/Page.astro'
import TinaOnly from '@components/tina/TinaOnly'
import Page from '@components/tina/Page'
import PageBlock from '@components/tina/PageBlock'
import { isNotEmpty } from '@lib/utils'

import { client } from '@tina/__generated__/client'

export const getStaticPaths = (async () => {
  const pages = await client.queries.pagesConnection()
  return (
    pages.data.pagesConnection.edges
      ?.map((page) => {
        let slug = page?.node?._sys.filename
        if (!slug) return null
        const filename = slug
        if (slug === 'index') {
          slug = ''
        }
        return {
          params: { page: slug },
          props: { filename },
        }
      })
      .filter(isNotEmpty) || []
  )
}) satisfies GetStaticPaths

const page = await client.queries.pages({
  relativePath: `${Astro.props.filename}.mdx`,
})

const metadata = {
  title: page.data.pages.title,
  description: page.data.pages?.meta?.description,
  ogImage: page.data.pages?.meta?.ogImage,
}
---

<Layout {...metadata} useAsTitle={true}>
  <main class="container m-auto">
    {
      page.data.pages.blocks?.map((block, i) => {
        const hydrateOnVisible =
          block?.__typename === 'PagesBlocksAccordion' ||
          block?.__typename === 'PagesBlocksCarousel'
        return (
          <div data-tina-block="astro">
            <PageBlock
              client:visible={hydrateOnVisible}
              data={page}
              blockIndex={i}
            />
          </div>
        )
      })
    }
    <TinaOnly client:tina replace="[data-tina-block='astro']">
      <Page client:tina data={page} />
    </TinaOnly>
  </main>
</Layout>
